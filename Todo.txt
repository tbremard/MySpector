+Transformation: Replace(text, old, new) : DONE

+Check : 
textDoContain    : Done
textDoNotContain : Done
NumberIsGreater  : Done
NumberIsLess     : Done
NumberIsEqual    : Done

+ ExtractionFactory           : Done
+ Download html               : Done
+ Daily analysis on 4 targets : Done
+ Expose result via webservice
+ Expose Result by iframe

+TransformerFactory				: Done: text to number is a xtraxRule

+Notifier
StubNotifier     : Done
MailNotifier     : Problem : need Smtp Tls server
WebCallback      :     TODO
TwitterNotifier  :     TODO

textToNumber must be an element of Xtrax : Done
xtrax: implement replace() : done
LengthOfTextXtraxRule        --------------------------------------------: done 

Checker must be available on text : Contains / DoNotContain
create test to isolate Title with Between operator   : Done
create use case to check if number Greater than reference(Allianz oblig) : Done  
create use case to check if number is Different than reference           : Done  

Rename "XtraxRule" to "Trox"-----------------------------------------: Done
ConsoleRunner    : Done

Database : each Ressource can be linked to a set of pipelines
a pipeline do not need to have a checker or notifier: it can only save data
it is possible to construct indicrect pipelines : the input of an indirect pipeline is the output of another pipeline
use case: an indicrect pipeline can find the minimum price on a set of pipelines

each pipeline is organized in a folder hierarchy with 'Composite pattern': there are Containers and items . a pipeline is an item

problem:
apply Chain on : Transform: Done (Transformer is an Xtraxer)
apply Chain on : Notifier ----------------------------------------------: Done 
bool Check(); must take input from Transform: Done: created DataTruck

todo:
each cell (Trox/checker) must log input / output
implement NumberIsDifferent

user can specify its own HTTP headers   : done
define scenario with TARGET SQL --------------------------------------: Done
define database and tables ------------------------------------------ : Done
use MySql ----------------------------------------------------------- : Done
            Downloader = new HttpDownloader();// use instead ServiceLocator.Instance.CreateDownloader(target.Type)

Create Repo/test Repo ------------------------------------------------ : Done
MUST CHECK ORDERS AND DBIDS    -----------------------------------------------------------------
Load all data from DB ------------------------------------------------ : Done
console factory / db data -------------------------------------------- : Done
Xtract Xpath of Xml doc----------------------------------------------- : Done
parse generic json --------------------------------------------------- : Done
ProcessOutputGrab : process + args + stdin  ----------------------     : Done
Manage data sources by name         ---------------------------------- : Done
Result of extraction is versionned                                     : Done
each webrequest saves the latency. ----------------------------------- : Done
flush report spec fonctionnelles   ------------------------------------: Done
error of HtmlXpathXtrax should be reported to result                  -: Done
full debug output of Pipeline should be added to result  --------------: Done
checker : price < x% within y days ----------------------------------- :   2
 ExcelXtrax :                   --------------------------------------    4
 Scheduler                                           -------------------- 5 
 Alert on latency criteria ---------------------------------------------- 6 
 define acceptance criteria for benchmarking

make public/private Spectors
make page display all public Spectors

it is possible to trigger a notification when latency is above a given limit
